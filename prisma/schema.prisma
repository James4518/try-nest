generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model avatar {
  id       Int    @id @default(autoincrement())
  filename String @unique(map: "filename") @db.VarChar(50)
  mimetype String @db.VarChar(15)
  size     Int
  userId   Int
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "avatar_ibfk_1")

  @@index([userId], map: "userId")
}

model comment {
  id            Int       @id @default(autoincrement())
  content       String    @db.VarChar(200)
  momentId      Int
  userId        Int
  commentId     Int?
  createAt      DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  moment        moment    @relation(fields: [momentId], references: [id], onDelete: Cascade, map: "comment_ibfk_1")
  user          user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "comment_ibfk_2")
  comment       comment?  @relation("commentTocomment", fields: [commentId], references: [id], onDelete: Cascade, map: "comment_ibfk_3")
  other_comment comment[] @relation("commentTocomment")

  @@index([commentId], map: "commentId")
  @@index([momentId], map: "momentId")
  @@index([userId], map: "userId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model follow {
  id         Int               @id @default(autoincrement())
  userId     Int
  targetId   Int
  actionType follow_actionType
  user       user              @relation(fields: [userId], references: [id], onDelete: Cascade, map: "follow_ibfk_1")

  @@index([userId], map: "userId")
}

model label {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "name") @db.VarChar(8)
  moment_label moment_label[] @ignore
}

model moment {
  id             Int              @id @default(autoincrement())
  content        String           @db.Text
  userId         Int
  viewCount      Int              @default(0)
  likeCount      Int              @default(0)
  collectCount   Int              @default(0)
  createAt       DateTime?        @default(dbgenerated("(now())")) @db.DateTime(0)
  comment        comment[]
  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "moment_ibfk_1")
  moment_label   moment_label[]   @ignore
  moment_picture moment_picture[]

  @@index([userId], map: "userId")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model moment_label {
  momentId Int
  labelId  Int
  moment   moment @relation(fields: [momentId], references: [id], onDelete: Cascade, map: "moment_label_ibfk_1")
  label    label  @relation(fields: [labelId], references: [id], onDelete: Cascade, map: "moment_label_ibfk_2")

  @@index([labelId], map: "labelId")
  @@index([momentId], map: "momentId")
  @@ignore
}

model moment_picture {
  id       Int    @id @default(autoincrement())
  momentId Int
  filename String @unique(map: "filename") @db.VarChar(50)
  mimetype String @db.VarChar(15)
  size     Int
  location String @db.VarChar(80)
  moment   moment @relation(fields: [momentId], references: [id], onDelete: Cascade, map: "moment_picture_ibfk_1")

  @@index([momentId], map: "momentId")
}

model points_april {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_april_ibfk_1")

  @@index([userId], map: "userId")
}

model points_august {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_august_ibfk_1")

  @@index([userId], map: "userId")
}

model points_december {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_december_ibfk_1")

  @@index([userId], map: "userId")
}

model points_february {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_february_ibfk_1")

  @@index([userId], map: "userId")
}

model points_january {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_january_ibfk_1")

  @@index([userId], map: "userId")
}

model points_july {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_july_ibfk_1")

  @@index([userId], map: "userId")
}

model points_june {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_june_ibfk_1")

  @@index([userId], map: "userId")
}

model points_march {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_march_ibfk_1")

  @@index([userId], map: "userId")
}

model points_may {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_may_ibfk_1")

  @@index([userId], map: "userId")
}

model points_november {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_november_ibfk_1")

  @@index([userId], map: "userId")
}

model points_october {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_october_ibfk_1")

  @@index([userId], map: "userId")
}

model points_september {
  id        Int       @id @default(autoincrement())
  userId    Int
  changed   Int
  isDeleted Boolean   @default(dbgenerated("(false)"))
  createAt  DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "points_september_ibfk_1")

  @@index([userId], map: "userId")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "name") @db.VarChar(10)
  password         String             @db.VarChar(32)
  avatarUrl        String             @db.VarChar(50)
  point            Int                @default(50)
  level            String             @default(dbgenerated("(_utf8mb4\\'åé²éè\\')")) @db.VarChar(4)
  createAt         DateTime?          @default(dbgenerated("(now())")) @db.DateTime(0)
  updateAt         DateTime?          @default(dbgenerated("(now())")) @db.DateTime(0)
  avatar           avatar[]
  comment          comment[]
  follow           follow[]
  moment           moment[]
  points_april     points_april[]
  points_august    points_august[]
  points_december  points_december[]
  points_february  points_february[]
  points_january   points_january[]
  points_july      points_july[]
  points_june      points_june[]
  points_march     points_march[]
  points_may       points_may[]
  points_november  points_november[]
  points_october   points_october[]
  points_september points_september[]
}

enum follow_actionType {
  follow
  like
  collect
}
